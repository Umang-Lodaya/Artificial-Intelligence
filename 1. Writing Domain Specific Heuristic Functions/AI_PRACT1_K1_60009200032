{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cp0M49a06GCb"
      },
      "source": [
        "## **MAKING MOVE GEN FUNCTIONS**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UR0YWP-lJOKF"
      },
      "source": [
        "### **WATER JUG**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "LCFtwqxUyZLq"
      },
      "outputs": [],
      "source": [
        "def goalTest(curr, goal):\n",
        "    if goal in curr:\n",
        "        return True\n",
        "    else:\n",
        "        return False"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "WDWoVtq6x7O4"
      },
      "outputs": [],
      "source": [
        "def moveGen(curr, max, goal):\n",
        "    if(goalTest(curr, goal)):\n",
        "        return True\n",
        "    \n",
        "    n = len(curr)\n",
        "    next = []\n",
        "    # from_ = JUG FROM WHICH WE WILL POUR WATER\n",
        "    for from_ in range(n):\n",
        "        # to_ = JUG INTO WHICH WE WILL POUR WATER\n",
        "        for to_ in range(n):\n",
        "\n",
        "            water = curr.copy()\n",
        "            # JUGS SHOULD NOT BE SAME AND from_ SHOULDN'T BE EMPTY AND to_ SHOULDN'T BE FULL\n",
        "            if from_ != to_ and water[from_] != 0 and water[to_] != max[to_]:\n",
        "                avail_space = max[to_] - water[to_]\n",
        "                extra = water[from_] - avail_space\n",
        "\n",
        "                # IF WE ARE ABLE TO POUR ALL WATER IN to_, THEN NOTHING WILL REMAIN EXTRA\n",
        "                if extra < 0:\n",
        "                    extra = 0\n",
        "\n",
        "                # POURING THE WATER\n",
        "                pour = water[from_] - extra\n",
        "                water[from_] = water[from_] - pour\n",
        "                water[to_] = water[to_] + pour\n",
        "\n",
        "                next.append(water)\n",
        "\n",
        "    return next"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yvtm9Q-txBY6",
        "outputId": "ac05f11a-99f9-4ba1-c119-6bf4e33b5ed8"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[[0, 8], [7, 1]]\n"
          ]
        }
      ],
      "source": [
        "jugs = int(input('ENTER NUMBERS OF JUGS '))\n",
        "\n",
        "max = []\n",
        "start = []\n",
        "for i in range(jugs):\n",
        "    max.append(int(input(f'ENTER MAX CAPACITY OF JUG {i+1}: ')))\n",
        "    start.append(int(input(f'ENTER INITIAL LEVEL OF JUG {i+1}: ')))\n",
        "\n",
        "goal = int(input('ENTER WATER LEVEL TO FIND: '))\n",
        "\n",
        "moves = moveGen(start, max, goal)\n",
        "\n",
        "if(moves == True):\n",
        "    print('WATER LEVEL FOUND!')\n",
        "else:\n",
        "    print(moves)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U8CclsWCA10h"
      },
      "source": [
        "### **TSP**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "MoAGMYqgD6jV"
      },
      "outputs": [],
      "source": [
        "def goalTest(curr, goal): \n",
        "    if curr != goal:\n",
        "        return False\n",
        "    else:\n",
        "        return True"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "PzNlSp3HA39N"
      },
      "outputs": [],
      "source": [
        "def moveGen(adj_mat, curr, goal):\n",
        "    next = []\n",
        "    if goalTest(curr, goal):\n",
        "        return True\n",
        "        \n",
        "    for i, vertex in enumerate(adj_mat[curr]):\n",
        "        if vertex!= 0:\n",
        "            next.append(i)\n",
        "    return next"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zNx4e_0VBJVL",
        "outputId": "4f8e5651-6cf9-4f3a-8f42-707b8ee64166"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "ENTER NUMBER OF VERTICES: 5\n",
            "0 1 1 1 1\n",
            "1 0 0 1 1\n",
            "1 0 0 1 1\n",
            "1 1 1 0 0\n",
            "1 1 1 0 0\n",
            "\n",
            "ENTER STARTING VERTEX: 3\n",
            "ENTER GOAL VERTEX: 0\n",
            "[0, 1, 2]\n"
          ]
        }
      ],
      "source": [
        "vertices = int(input('ENTER NUMBER OF VERTICES: '))\n",
        "adj_mat = []\n",
        "for i in range(vertices):\n",
        "    row = input().split()\n",
        "    row = list(map(int, row))\n",
        "    adj_mat.append(row)\n",
        "\n",
        "start = int(input('\\nENTER STARTING VERTEX: '))\n",
        "goal = int(input('ENTER GOAL VERTEX: '))\n",
        "\n",
        "nextMoves = moveGen(adj_mat, start, goal)\n",
        "if(nextMoves == True):\n",
        "    print('TRAVERSED THE GRAPH')\n",
        "else:\n",
        "    print(nextMoves)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_Mk0cE076LnD"
      },
      "source": [
        "### **8 PUZZLES**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "JPiFjWm66VlK"
      },
      "outputs": [],
      "source": [
        "goal = [[1,2,3],\n",
        "        [4,5,6],\n",
        "        [7,8,0]]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "NkMg0F7U6SbT"
      },
      "outputs": [],
      "source": [
        "def goalTest(curr):\n",
        "    if curr != goal:\n",
        "        return False\n",
        "    else:\n",
        "        return True"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "EulJtMKD3A3y"
      },
      "outputs": [],
      "source": [
        "def moveGen(curr):\n",
        "    if goalTest(curr):\n",
        "        return True\n",
        "\n",
        "    next = []\n",
        "    for r_inx, row in enumerate(curr):\n",
        "        if 0 in row:\n",
        "            inx0 = [r_inx, row.index(0)]\n",
        "            print('Currently at', inx0)\n",
        "\n",
        "            # FOR MOVING UP\n",
        "            if inx0[0] - 1 >= 0:\n",
        "                next.append([inx0[0]-1, inx0[1]])\n",
        "            \n",
        "            # FOR MOVING DOWN\n",
        "            if inx0[0] + 1 <= 2:\n",
        "                next.append([inx0[0]+1, inx0[1]])\n",
        "\n",
        "            # FOR MOVING LEFT\n",
        "            if inx0[1] - 1 >= 0:\n",
        "                next.append([inx0[0], inx0[1]-1])\n",
        "            \n",
        "            # FOR MOVING DOWN\n",
        "            if inx0[1] + 1 <= 2:\n",
        "                next.append([inx0[0], inx0[1]+1])\n",
        "    \n",
        "    return next"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lNSwzonB6VA1",
        "outputId": "c0216d5a-0206-4d32-edf9-bfad7d48ff40"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "1 2 4\n",
            "5 0 3\n",
            "8 6 7\n",
            "Currently at [1, 1]\n",
            "[[0, 1], [2, 1], [1, 0], [1, 2]]\n"
          ]
        }
      ],
      "source": [
        "start = []\n",
        "for _ in range(3):\n",
        "        row = input().split()\n",
        "        row = list(map(int, row))\n",
        "        start.append(row)\n",
        "\n",
        "moves = moveGen(start)\n",
        "\n",
        "if(moves == True):\n",
        "    print('PUZZLE SOLVED')\n",
        "else:\n",
        "    print(moves)"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [
        "UR0YWP-lJOKF",
        "U8CclsWCA10h"
      ],
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3.10.0 64-bit",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.0"
    },
    "vscode": {
      "interpreter": {
        "hash": "472a874523f7a6a2f49073b3ba5c5cf2d7741671cc899a0713ec4f0a7e7ff985"
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
